@startuml

' Define interfaces for the Observer pattern
interface Observer {
}

interface Subject {
}

' Define concrete classes for the Observer pattern
class WaitStaffObserver implements Observer {
}

class KitchenStaffObserver implements Observer {
}

class OrderSubject implements Subject {
}

' Define interfaces and classes for the State pattern for MenuItems
interface ItemState {
}

class Queueing implements ItemState {
}

class Cooking implements ItemState {
}

class Cooked implements ItemState {
}

class Served implements ItemState {
}

class OrderItemContext {
}

abstract MenuItem {
}

class SingleItem implements MenuItem {
}

class ComboItem implements MenuItem {
}

' Define user roles
abstract class User {
}

class KitchenStaff {
}

class WaitStaff {
}

class Manager {
}

class RegularUser {
}

' Link users to Observer roles
WaitStaffObserver -down-|> WaitStaff
KitchenStaffObserver -down-|> KitchenStaff

' Connect the menu items to the order and states
OrderItemContext -left-> ItemState
OrderItemContext -right-> OrderSubject
OrderItemContext --> MenuItem : contains

' Composite pattern relations
MenuItem <|-- SingleItem
MenuItem <|-- ComboItem

' Link Subject to Observers explicitly
OrderSubject "1" -right-> "*" Observer : notifies >

' Composite pattern relations for user
User <|-- WaitStaff
User <|-- KitchenStaff
User <|-- Manager
User <|-- RegularUser

' Define Singleton for Analytics
class Analytics {
}

Analytics <-down- Manager

class OrderFactory {
}

OrderFactory --> Order

' Link WaitStaff to creating OrderItem
WaitStaff --> OrderFactory : Creates

Order -> OrderItemContext : contains

interface OrderState {
}

class Reserving implements OrderState {
}

class Serving implements OrderState {
}

class Paid implements OrderState {
}

Order -> OrderState

@enduml

